// Generated by CoffeeScript 1.11.1
(function() {
  var DocumentEditInfo, DocumentInfo, SelectionSection, TextDocumentInfo, caretAfterBoldFlag, caretAfterBoldNum, createContentTextEle, createDocument, currentDocumentId, currentMenu, documentList, getSelectionSection, hideToolMenus, isWebKit, previousEndEleOfSelectionSection, previousSelectionEle, previousSelectionEleStart, refreshAllIcons, refreshToolIcon, setBoldText, setDocumentContent, setToolContainer, showToolMenu, toolInfo,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  toolInfo = [];

  documentList = [];

  currentMenu = null;

  currentDocumentId = 0;

  previousSelectionEle = null;

  previousSelectionEleStart = null;

  previousEndEleOfSelectionSection = null;

  caretAfterBoldFlag = false;

  caretAfterBoldNum = 0;

  isWebKit = navigator.userAgent.toUpperCase().indexOf("APPLEWEBKIT") >= 0 && navigator.userAgent.toUpperCase().indexOf("EDGE") < 0;

  DocumentInfo = (function() {
    function DocumentInfo() {}

    DocumentInfo.prototype.preview = "";

    return DocumentInfo;

  })();

  TextDocumentInfo = (function(superClass) {
    extend(TextDocumentInfo, superClass);

    function TextDocumentInfo() {
      return TextDocumentInfo.__super__.constructor.apply(this, arguments);
    }

    TextDocumentInfo.prototype.text = "";

    return TextDocumentInfo;

  })(DocumentInfo);

  DocumentEditInfo = (function() {
    function DocumentEditInfo() {}

    DocumentEditInfo.prototype.caretPos = 0;

    return DocumentEditInfo;

  })();

  SelectionSection = (function() {
    function SelectionSection() {}

    SelectionSection.prototype.startSpan = 0;

    SelectionSection.prototype.endSpan = 0;

    SelectionSection.prototype.startCaretPos = null;

    SelectionSection.prototype.endCaretPos = null;

    return SelectionSection;

  })();

  $("document").ready(function() {
    toolInfo["align"] = "left";
    refreshAllIcons();
    setInterval(function() {
      var currentSelectionEle, currentSelectionEleStart, event, sel;
      sel = window.getSelection();
      currentSelectionEle = null;
      currentSelectionEleStart = null;
      if (sel && sel.rangeCount > 0) {
        currentSelectionEle = window.getSelection().getRangeAt(0).startContainer.parentNode;
      }
      if (sel && sel.rangeCount > 0) {
        currentSelectionEleStart = window.getSelection().getRangeAt(0).startOffset;
      }
      if (currentSelectionEle !== previousSelectionEle || currentSelectionEleStart !== previousSelectionEleStart) {
        event = $.Event("selection");
        event.selectionStartIndex = currentSelectionEleStart;
        $(currentSelectionEle).trigger(event);
      }
      if (currentSelectionEle !== previousSelectionEle) {
        $(previousSelectionEle).trigger("unselection");
      }
      previousSelectionEle = currentSelectionEle;
      return previousSelectionEleStart = currentSelectionEleStart;
    }, 20);
    $("#textContent").on("paste", function(evt) {
      var content, text;
      evt.preventDefault();
      text = "";
      if (evt.clipboardData) {
        content = (evt.originalEvent || evt).clipboardData.getData("text/plain");
      } else if (window.clipboardData) {
        content = window.clipboardData.getData("Text");
      } else if (evt.originalEvent.clipboardData) {
        content = $("<div></div>").text(evt.originalEvent.clipboardData.getData("text"));
      }
      return document.execCommand("insertText", false, $(content).html());
    });
    $("#textContent").on("DOMNodeInserted", function(evt) {
      var afterDiv, afterSpan, afterText, beforeDiv, beforeSpan, beforeText, brSepFlag, i, j, len, len1, outText, range, ref, ref1, sel, sepDiv, sepSpan, target, words;
      target = evt.target;
      if (target.innerHTML === "") {
        $(target).removeClass("contentTextBold");
      }
      $(".contentText b").remove();
      $(".contentText strong").remove();
      if (!this.firstChild.tagName) {
        outText = $(this.firstChild).text();
        $(this.firstChild).remove();
        if ($(".contentText").length > 0) {
          $($(".contentText")[0]).text(outText);
        } else {
          $("#textContent").append(createContentTextEle(outText, false));
        }
        range = document.createRange();
        sel = window.getSelection();
        range.setStart($(".contentText")[0], 1);
        range.collapse(true);
        sel.removeAllRanges();
        sel.addRange(range);
      }
      if (target.tagName === "BR" && (!isWebKit)) {
        sepSpan = target.parentNode;
        if (sepSpan.tagName === "SPAN") {
          if ($(sepSpan.parentNode).attr("id") === "textContent") {
            beforeText = "";
            afterText = "";
            brSepFlag = false;
            ref = sepSpan.childNodes;
            for (i = 0, len = ref.length; i < len; i++) {
              words = ref[i];
              if (words.tagName === "BR") {
                brSepFlag = true;
              } else if (brSepFlag) {
                afterText += $(words).text();
              } else {
                beforeText += $(words).text();
              }
            }
            beforeSpan = $(sepSpan).clone()[0];
            beforeSpan.innerHTML = "";
            $(beforeSpan).text(beforeText);
            afterSpan = $(sepSpan).clone()[0];
            afterSpan.innerHTML = "";
            $(afterSpan).text(afterText);
            beforeDiv = document.createElement("div");
            if ($(sepSpan).prevAll().length > 0) {
              $(sepSpan).prevAll().appendTo($(beforeDiv));
            }
            if ($(beforeSpan).text().length > 0) {
              $(beforeSpan).appendTo($(beforeDiv));
            }
            $(beforeDiv).insertBefore($(sepSpan));
            afterDiv = document.createElement("div");
            if ($(afterSpan).text().length > 0) {
              $(afterSpan).appendTo($(afterDiv));
            }
            if ($(sepSpan).nextAll().length > 0) {
              $(sepSpan).nextAll().appendTo($(afterDiv));
            }
            if (afterDiv.childNodes.length === 0) {
              $(createContentTextEle("", false)).appendTo($(afterDiv));
            }
            $(afterDiv).insertAfter($(sepSpan));
            $(sepSpan).remove();
          } else {
            afterText = "";
            brSepFlag = false;
            ref1 = sepSpan.childNodes;
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              words = ref1[j];
              if (words.tagName === "BR") {
                brSepFlag = true;
              } else if (brSepFlag) {
                afterText += $(words).text();
                $(words).remove();
              }
            }
            afterSpan = $(sepSpan).clone()[0];
            $(afterSpan).text(afterText);
            afterDiv = document.createElement("div");
            sepDiv = sepSpan.parentNode;
            if ($(afterSpan).text().length > 0) {
              $(afterSpan).appendTo($(afterDiv));
            }
            if ($(sepSpan).nextAll().length > 0) {
              $(sepSpan).nextAll().appendTo($(afterDiv));
            }
            if ($(sepSpan).text().length === 0) {
              $(sepSpan).remove();
            }
            if (afterDiv.childNodes.length === 0) {
              $(createContentTextEle("", false)).appendTo($(afterDiv));
            }
            $(afterDiv).insertAfter($(sepDiv));
            afterDiv.firstChild.focus();

            /*range = document.createRange()
            sel = window.getSelection()
            range.setStart(afterDiv.firstChild, 0)
            range.collapse(true)
            sel.removeAllRanges()
            sel.addRange(range)
             */
          }
          return $(target).remove();
        }
      }
    });
    $(document).on("selection", ".contentTextBold", function(evt) {
      var nextEle, range, selection;
      if ($(this).text().length === evt.selectionStartIndex && window.getSelection().toString().length === 0) {
        if (isWebKit) {
          caretAfterBoldFlag = true;
          return caretAfterBoldNum = $(this).text().length;
        } else {
          nextEle = null;
          if (($(this).next().length)) {
            nextEle = $(this).next()[0];
          } else {
            nextEle = document.createElement("span");
            $(nextEle).addClass("contentText");
            $(nextEle).insertAfter($(this));
          }
          nextEle.focus();
          range = document.createRange();
          selection = window.getSelection();
          if (nextEle.innerHTML === "") {
            range.setStart(nextEle, 0);
          } else {
            range.setStart(nextEle.firstChild, 0);
          }
          range.collapse(true);
          selection.removeAllRanges();
          return selection.addRange(range);
        }
      } else if (isWebKit) {
        return caretAfterBoldFlag = false;
      }
    });
    $(document).on("unselection", ".contentTextBold", function() {
      if (isWebKit) {
        return caretAfterBoldFlag = false;
      }
    });
    $(document).on("DOMSubtreeModified", ".contentTextBold", function(evt) {
      var newEle, newText, nextEle, oldText, range, selection;
      if (isWebKit) {
        evt.stopPropagation();
        if (caretAfterBoldFlag) {
          oldText = $(this).text().substring(0, caretAfterBoldNum);
          newText = $(this).text().substring(caretAfterBoldNum, $(this).text().length);
          nextEle = null;
          if (($(this).next().length)) {
            nextEle = $(this).next()[0];
          } else {
            nextEle = document.createElement("span");
            $(nextEle).addClass("contentText");
            $(nextEle).insertAfter($(this));
          }
          $(nextEle).text(newText + $(nextEle).text());
          nextEle.focus();
          range = document.createRange();
          selection = window.getSelection();
          range.setStart(nextEle.firstChild, $(this).text().length - caretAfterBoldNum);
          range.collapse(true);
          selection.removeAllRanges();
          selection.addRange(range);
          newEle = document.createElement("span");
          newEle.innerHTML = oldText;
          $(newEle).addClass("contentText");
          $(newEle).addClass("contentTextBold");
          $(newEle).insertAfter($(this));
          return $(this).remove();
        }
      }
    });
    $(document).on("DOMSubtreeModified", "#textContent div", function() {
      if (this.childNodes.length === 0) {
        return $(this).remove();
      }
    });
    $("#btnFile").addClass("btnToolTabOnSelect");
    setToolContainer("file");
    setDocumentContent("text", null);
    hideToolMenus();
    $(".btnToolTab").on("click", function() {
      $(".btnToolTab").removeClass("btnToolTabOnSelect");
      $(this).addClass("btnToolTabOnSelect");
      switch (this.id) {
        case "btnFile":
          return setToolContainer("file");
        case "btnStart":
          return setToolContainer("start");
        case "btnInsert":
          return setToolContainer("insert");
      }
    });
    $(".btnToolBig").on("click", function() {
      hideToolMenus();
      switch (this.id) {
        case "btnToolAlign":
          return showToolMenu("align", "#toolMenuAlign");
        case "btnToolPicture":
          return $("#btnToolPictureHolder").click();
      }
    });
    $("#btnToolStrong").on("click", function() {
      return setBoldText();
    });
    $(".btnMenuAlign").on("click", function(evt) {
      evt.stopPropagation();
      switch (this.id) {
        case "btnMenuAlignCenter":
          toolInfo["align"] = "center";
          break;
        case "btnMenuAlignLeft":
          toolInfo["align"] = "left";
          break;
        case "btnMenuAlignRight":
          toolInfo["align"] = "right";
      }
      refreshToolIcon("align");
      hideToolMenus();
      return currentMenu = null;
    });
    $(".toolFileHolder").on("click", function(evt) {
      return evt.stopPropagation();
    });
    return $(".toolFileHolder").change(function() {
      return alert(1);
    });
  });

  getSelectionSection = function() {
    var sel, selectionSection;
    sel = window.getSelection();
    this.allCaretEndPos = $("#textContent").caret("pos");
    this.allCaretStartPos = allCaretEndPos - window.getSelection().toString().length;
    this.startSpan = null;
    this.endSpan = null;
    this.startCaretPos = 0;
    this.endCaretPos = 0;
    this.charCount = 0;
    $(".contentText").each(function() {
      var textLength;
      textLength = $(this).text().length;
      self.charCount += textLength;
      if (startSpan === null && self.charCount >= self.allCaretStartPos) {
        self.startCaretPos = textLength - (self.charCount - self.allCaretStartPos);
        self.startSpan = this;
      }
      if (self.charCount >= self.allCaretEndPos) {
        self.endCaretPos = textLength - (self.charCount - self.allCaretEndPos);
        self.endSpan = this;
        return false;
      }
    });
    selectionSection = new SelectionSection();
    selectionSection.startSpan = this.startSpan;
    selectionSection.endSpan = this.endSpan;
    selectionSection.startCaretPos = this.startCaretPos;
    selectionSection.endCaretPos = this.endCaretPos;
    return selectionSection;
  };

  setToolContainer = function(type) {
    $(".toolContainer").hide();
    switch (type) {
      case "file":
        return $("#toolListFile").show();
      case "start":
        return $("#toolListStart").show();
      case "insert":
        return $("#toolListInsert").show();
    }
  };

  setDocumentContent = function(type, documentId) {
    $(".documentContentContainer").hide();
    switch (type) {
      case "title":
        return $("#titleContent").show();
      case "text":
        return $("#textContent").show();
      case "picture":
        return $("#pictureContent").show();
    }
  };

  showToolMenu = function(type, menuId) {
    if (currentMenu === type) {
      return currentMenu = null;
    } else {
      currentMenu = type;
      return $(menuId).show();
    }
  };

  hideToolMenus = function() {
    return $(".toolMenu").hide();
  };

  createDocument = function(type) {};

  refreshToolIcon = function(type) {
    switch (type) {
      case "align":
        $(".toolAlignIcon").hide();
        switch (toolInfo["align"]) {
          case "center":
            return $("#toolAlignIconCenter").show();
          case "left":
            return $("#toolAlignIconLeft").show();
          case "right":
            return $("#toolAlignIconRight").show();
        }
    }
  };

  refreshAllIcons = function() {
    return refreshToolIcon("align");
  };

  setBoldText = function() {
    var boldFlag, endSpan, endTextAfter, endTextToBold, selectionSection, spanToBold, startSpan, startTextBefore, startTextToBold, textAfter, textBefore, textToBold;
    selectionSection = getSelectionSection();
    if (selectionSection.startSpan === selectionSection.endSpan) {
      spanToBold = selectionSection.startSpan;
      textBefore = $(spanToBold).text().substring(0, selectionSection.startCaretPos);
      textAfter = $(spanToBold).text().substring(selectionSection.endCaretPos, $(spanToBold).text().length);
      textToBold = $(spanToBold).text().substring(selectionSection.startCaretPos, selectionSection.endCaretPos);
      if (!$(spanToBold).hasClass("contentTextBold")) {
        $(spanToBold).text(textToBold);
        $(spanToBold).addClass("contentTextBold");
        if (textBefore.length > 0) {
          $(createContentTextEle(textBefore, false)).insertBefore($(spanToBold));
        }
        if (textAfter.length > 0) {
          return $(createContentTextEle(textAfter, false)).insertAfter($(spanToBold));
        }
      } else {
        $(spanToBold).text(textToBold);
        $(spanToBold).removeClass("contentTextBold");
        if (textBefore.length > 0) {
          $(createContentTextEle(textBefore, true)).insertBefore($(spanToBold));
        }
        if (textAfter.length > 0) {
          return $(createContentTextEle(textAfter, true)).insertAfter($(spanToBold));
        }
      }
    } else {
      this.boldFlag = false;
      this.isInRange = false;
      this.startSpan = selectionSection.startSpan;
      this.endSpan = selectionSection.endSpan;
      $(".contentText").each(function() {
        if (this === self.startSpan) {
          self.isInRange = true;
        }
        if (self.isInRange && (!($(this).hasClass("contentTextBold")))) {
          self.boldFlag = true;
          return false;
        }
        if (this === self.endSpan) {
          return false;
        }
      });
      boldFlag = this.boldFlag;
      startSpan = selectionSection.startSpan;
      endSpan = selectionSection.endSpan;
      startTextBefore = $(startSpan).text().substring(0, selectionSection.startCaretPos);
      startTextToBold = $(startSpan).text().substring(selectionSection.startCaretPos, $(selectionSection.startSpan).text().length);
      endTextToBold = $(endSpan).text().substring(0, selectionSection.endCaretPos);
      endTextAfter = $(endSpan).text().substring(selectionSection.endCaretPos, $(selectionSection.endSpan).text().length);
      if (boldFlag) {
        $(startSpan).text(startTextToBold);
        $(startSpan).addClass("contentTextBold");
        if (startTextBefore.length > 0) {
          $(createContentTextEle(startTextBefore, false)).insertBefore($(startSpan));
        }
        $(endSpan).text(endTextToBold);
        $(endSpan).addClass("contentTextBold");
        if (endTextAfter.length > 0) {
          $(createContentTextEle(endTextAfter, false)).insertAfter($(endSpan));
        }
      } else {
        $(startSpan).text(startTextToBold);
        $(startSpan).removeClass("contentTextBold");
        if (startTextBefore.length > 0) {
          $(createContentTextEle(startTextBefore, true)).insertBefore($(startSpan));
        }
        $(endSpan).text(endTextToBold);
        $(endSpan).removeClass("contentTextBold");
        if (endTextAfter.length > 0) {
          $(createContentTextEle(endTextAfter, true)).insertAfter($(endSpan));
        }
      }
      this.isInRange = false;
      return $(".contentText").each(function() {
        if (this === self.endSpan) {
          return false;
        }
        if (self.isInRange) {
          if (self.boldFlag) {
            $(this).addClass("contentTextBold");
          } else {
            $(this).removeClass("contentTextBold");
          }
        }
        if (this === self.startSpan) {
          return self.isInRange = true;
        }
      });
    }
  };

  createContentTextEle = function(text, isBold) {
    var ele;
    ele = document.createElement("span");
    $(ele).text(text);
    $(ele).addClass("contentText");
    if (isBold) {
      $(ele).addClass("contentTextBold");
    }
    return ele;
  };

}).call(this);

//# sourceMappingURL=formPage.js.map
