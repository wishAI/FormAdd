// Generated by CoffeeScript 1.12.2
(function() {
  var CachedFile, DocumentContent, ImageBlock, ImageContent, ParagraphContent, TitleContent, contentEditableManager, createDocument, documentContents, fileSrcManager, getSelectDocument, hideToolMenus, isWebKit, moduleFactory, refreshAllToolIcons, refreshDocumentTabs, refreshToolIcon, resetDocumentStatus, selectDocumentIndex, selectImageIndex, selectMenu, setBoldText, setDocumentContent, setImage, setToolContainer, setToolContainerTab, setup, setupEvent, showToolMenu, toolInfo,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  toolInfo = [];

  documentContents = [];

  selectMenu = null;

  selectDocumentIndex = 0;

  selectImageIndex = 0;

  moduleFactory = null;

  contentEditableManager = null;

  fileSrcManager = null;

  isWebKit = navigator.userAgent.toUpperCase().indexOf("APPLEWEBKIT") >= 0 && navigator.userAgent.toUpperCase().indexOf("EDGE") < 0;

  DocumentContent = (function() {
    function DocumentContent() {}

    DocumentContent.prototype.type = null;

    DocumentContent.prototype.preview = "";

    return DocumentContent;

  })();

  TitleContent = (function(superClass) {
    extend(TitleContent, superClass);

    function TitleContent() {
      return TitleContent.__super__.constructor.apply(this, arguments);
    }

    TitleContent.prototype.type = "title";

    TitleContent.prototype.preview = "标题";

    TitleContent.prototype.articleType = "";

    TitleContent.prototype.header = "";

    TitleContent.prototype.coverFile = null;

    return TitleContent;

  })(DocumentContent);

  ParagraphContent = (function(superClass) {
    extend(ParagraphContent, superClass);

    function ParagraphContent() {
      return ParagraphContent.__super__.constructor.apply(this, arguments);
    }

    ParagraphContent.prototype.type = "paragraph";

    ParagraphContent.prototype.preview = "段落";

    ParagraphContent.prototype.htmlText = "<span class=\"contentText\"></span>";

    ParagraphContent.prototype.getPureText = function() {};

    ParagraphContent.prototype.getStrongSection = function() {};

    return ParagraphContent;

  })(DocumentContent);

  ImageContent = (function(superClass) {
    extend(ImageContent, superClass);

    function ImageContent() {
      return ImageContent.__super__.constructor.apply(this, arguments);
    }

    ImageContent.prototype.type = "image";

    ImageContent.prototype.preview = "图片";

    ImageContent.prototype.imageBlocks = [];

    return ImageContent;

  })(DocumentContent);

  ImageBlock = (function() {
    function ImageBlock() {}

    ImageBlock.prototype.inputId = null;

    ImageBlock.prototype.imageFile = null;

    ImageBlock.prototype.info = null;

    return ImageBlock;

  })();

  CachedFile = (function() {
    function CachedFile(dataId, srcKey) {
      this.dataId = dataId;
      this.srcKey = srcKey;
    }

    return CachedFile;

  })();

  setup = function() {
    var titleContent;
    contentEditableManager = new window.ContentEditableManager(isWebKit);
    contentEditableManager.setup();
    moduleFactory = new window.ModuleFactory();
    fileSrcManager = new window.FileSrcManager(0, moduleFactory);
    toolInfo["align"] = "left";
    refreshAllToolIcons();
    titleContent = new TitleContent();
    documentContents.push(titleContent);
    refreshDocumentTabs();
    $("#btnFile").addClass("btnToolTabOnSelect");
    setToolContainer("file");
    setDocumentContent(0);
    return hideToolMenus();
  };

  setupEvent = function() {
    $(".btnToolTab").on("click", function() {
      $(".btnToolTab").removeClass("btnToolTabOnSelect");
      $(this).addClass("btnToolTabOnSelect");
      switch (this.id) {
        case "btnFile":
          return setToolContainer("file");
        case "btnInsert":
          return setToolContainer("insert");
        case "btnParagraph":
          return setToolContainer("paragraph");
        case "btnImage":
          return setToolContainer("image");
      }
    });
    $(".btnToolBig").on("click", function() {
      var imageContent, paragraphContent;
      hideToolMenus();
      switch (this.id) {
        case "btnToolAlign":
          return showToolMenu("align", "#toolMenuAlign");
        case "btnToolStrong":
          return setBoldText();
        case "btnToolAddImage":
          return fileSrcManager.addFile("image");
        case "btnToolImage":
          imageContent = new ImageContent();
          documentContents.push(imageContent);
          return refreshDocumentTabs();
        case "btnToolParagraph":
          paragraphContent = new ParagraphContent();
          documentContents.push(paragraphContent);
          return refreshDocumentTabs();
      }
    });
    $(".documentTab").on("click", function() {
      return console.log($(this).index());
    });
    $(".btnMenuAlign").on("click", function(evt) {
      evt.stopPropagation();
      switch (this.id) {
        case "btnMenuAlignCenter":
          toolInfo["align"] = "center";
          break;
        case "btnMenuAlignLeft":
          toolInfo["align"] = "left";
          break;
        case "btnMenuAlignRight":
          toolInfo["align"] = "right";
      }
      refreshToolIcon("align");
      hideToolMenus();
      return selectMenu = null;
    });
    $(document).on("change", "#fileSrcHolders.fileSrcHolder", function() {
      $("#fileSrcHolders.fileSrcHolder").each(function() {
        if (!this.val()) {
          return $(this).remove();
        }
      });
      switch ($(this).attr("fileType")) {
        case "image":
          return console.log(1);
      }
    });
    $(".toolFileHolder").on("click", function(evt) {
      return evt.stopPropagation();
    });
    return $(".toolFileHolder").change(function() {
      return alert(1);
    });
  };

  setToolContainerTab = function(type) {
    $(".btnToolTabSwitch").hide();
    switch (type) {
      case "paragraph":
        return $("#btnParagraph").show();
      case "image":
        return $("#btnImage").show();
    }
  };

  setToolContainer = function(type) {
    $(".toolContainer").hide();
    switch (type) {
      case "file":
        return $("#toolListFile").show();
      case "insert":
        return $("#toolListInsert").show();
      case "paragraph":
        return $("#toolListParagraph").show();
      case "image":
        return $("#toolListImage").show();
    }
  };

  refreshToolIcon = function(type) {
    switch (type) {
      case "align":
        $(".toolAlignIcon").hide();
        switch (toolInfo["align"]) {
          case "center":
            return $("#toolAlignIconCenter").show();
          case "left":
            return $("#toolAlignIconLeft").show();
          case "right":
            return $("#toolAlignIconRight").show();
        }
    }
  };

  refreshAllToolIcons = function() {
    return refreshToolIcon("align");
  };

  showToolMenu = function(type, menuId) {
    if (selectMenu === type) {
      return selectMenu = null;
    } else {
      selectMenu = type;
      return $(menuId).show();
    }
  };

  hideToolMenus = function() {
    return $(".toolMenu").hide();
  };

  setDocumentContent = function(documentIndex) {
    var documentContent;
    $(".documentContentContainer").hide();
    documentContent = documentContents[documentIndex];
    switch (documentContent.type) {
      case "title":
        $("#titleContent").show();
        break;
      case "paragraph":
        $("#textContent")[0].innerHTML = documentContent.htmlText;
        $("#textContent").show();
        break;
      case "image":
        $("#imageContent").show();
    }
    return setToolContainerTab(type);
  };

  createDocument = function(type) {};

  getSelectDocument = function() {
    return documentContents[selectDocumentIndex];
  };

  resetDocumentStatus = function() {
    selectImageIndex = 0;
    return contentEditableManager.reset();
  };

  refreshDocumentTabs = function() {
    var documentContent, i, len, module, results;
    $("#documentTabList").find(".documentTab").remove();
    results = [];
    for (i = 0, len = documentContents.length; i < len; i++) {
      documentContent = documentContents[i];
      module = null;
      switch (documentContent.type) {
        case "title":
          module = moduleFactory.getModuleById("tmpDocumentTabTitle");
          break;
        case "paragraph":
          module = moduleFactory.getModuleById("tmpDocumentTabParagraph");
          break;
        case "image":
          module = moduleFactory.getModuleById("tmpDocumentTabImage");
      }
      $(module).find(".documentTabPreview").text(documentContent.preview);
      results.push($(module).appendTo($("#documentTabList")));
    }
    return results;
  };

  setBoldText = function() {
    return contentEditableManager.setBoldText();
  };

  setImage = function(index) {};

  $("document").ready(function() {
    setup();
    return setupEvent();
  });

}).call(this);

//# sourceMappingURL=formPage.js.map
